// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/broker.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/smart-echo/micro/client"
	server "github.com/smart-echo/micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Broker service

type BrokerService interface {
	Publish(ctx context.Context, in *Message, opts ...client.CallOption) (*Empty, error)
}

type brokerService struct {
	c    client.Client
	name string
}

func NewBrokerService(name string, c client.Client) BrokerService {
	return &brokerService{
		c:    c,
		name: name,
	}
}

func (c *brokerService) Publish(ctx context.Context, in *Message, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Broker.Publish", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Broker service

type BrokerHandler interface {
	Publish(context.Context, *Message, *Empty) error
}

func RegisterBrokerHandler(s server.Server, hdlr BrokerHandler, opts ...server.HandlerOption) error {
	type broker interface {
		Publish(ctx context.Context, in *Message, out *Empty) error
	}
	type Broker struct {
		broker
	}
	h := &brokerHandler{hdlr}
	return s.Handle(s.NewHandler(&Broker{h}, opts...))
}

type brokerHandler struct {
	BrokerHandler
}

func (h *brokerHandler) Publish(ctx context.Context, in *Message, out *Empty) error {
	return h.BrokerHandler.Publish(ctx, in, out)
}
